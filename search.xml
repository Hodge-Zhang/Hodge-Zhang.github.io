<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo问题记录</title>
    <url>/2020/05/13/hexo%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="问题1："><a href="#问题1：" class="headerlink" title="问题1："></a>问题1：</h3><p>执行<code>hexo g</code>生成静态网页时出错：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">YAMLException: end of the stream or a document separator is expected at line x, column y: ...</span></span><br></pre></td></tr></table></figure>

<p>原因：hexo <code>_posts</code>文件夹内的<code>.md</code>文件头部应该有一些头部<code>meta</code>信息来初始化一些配置的变量，这些信息在执行命令<code>hexo n filename</code>创建新的文章时会自动加上，但若直接从外部创建一个Markdown文件到<code>_posts</code>文件夹内，然后执行命令创建静态网页时就会因为得不到相关信息报以上的错误。</p>
<p>比如<code>diaspora</code>主题的头部信息为：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: My awesome title</span><br><span class="line">date: 2020-1-12 18:38:45</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">    - </span>分类1</span><br><span class="line"><span class="bullet">    - </span>分类2</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">    - </span>标签1</span><br><span class="line"><span class="bullet">    - </span>标签2</span><br><span class="line">mp3: http://domain.com/awesome.mp3</span><br><span class="line">cover: http://domain.com/awesome-cover.png</span><br></pre></td></tr></table></figure>

<p><a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="noopener">更多关于hexo头部信息的内容</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo主题diaspora</title>
    <url>/2020/05/13/hexo%E4%B8%BB%E9%A2%98diaspora/</url>
    <content><![CDATA[<p><strong><a href="http://fech.in" target="_blank" rel="noopener">在线预览 | PREVIEW </a></strong></p>
<p>一款基于WP移植的Hexo主题，适合喜欢摄影，影评，乐评和玩弄文字的你，干净，清新； 响应式，Ajax，更多好玩的等你来发现。 </p>
<blockquote>
<p>再次感谢原作者创作出这么精美的主题 <a href="https://github.com/LoeiFy/Diaspora">@Loeify</a> 。如果你喜欢，请捐助原作者。</p>
</blockquote>
<p><img src="https://fech.in/static/images/Diaspora.jpg" alt="cover"></p>
<h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/Fechin/hexo-theme-diaspora.git themes/diaspora</span><br></pre></td></tr></table></figure>


<h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>修改Hexo配置文件 <code>_config.yml</code> 主题项设置为diaspora</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">diaspora</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>
<h3 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h3><p>注意：请在更时主题时备份<code>_config.yml</code>配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/diaspora</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>


<h3 id="新建文章模板"><a href="#新建文章模板" class="headerlink" title="新建文章模板"></a>新建文章模板</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: My awesome title</span><br><span class="line">date: 2016-10-12 18:38:45</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">    - </span>分类1</span><br><span class="line"><span class="bullet">    - </span>分类2</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">    - </span>标签1</span><br><span class="line"><span class="bullet">    - </span>标签2</span><br><span class="line">mp3: http://domain.com/awesome.mp3</span><br><span class="line">cover: http://domain.com/awesome.jpg</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="创建分类页"><a href="#创建分类页" class="headerlink" title="创建分类页"></a>创建分类页</h3><p>1 新建一个页面，命名为 categories 。命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>
<p>2 编辑刚新建的页面，将页面的类型设置为 categories</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: categories</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>主题将自动为这个页面显示所有分类。</p>
<h3 id="创建标签页"><a href="#创建标签页" class="headerlink" title="创建标签页"></a>创建标签页</h3><p>1 新建一个页面，命名为 tags 。命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>
<p>2 编辑刚新建的页面，将页面的类型设置为 tags</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>主题将自动为这个页面显示所有标签。</p>
<h3 id="创建搜索页"><a href="#创建搜索页" class="headerlink" title="创建搜索页"></a>创建搜索页</h3><p>1 需要安装hexo的搜索插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>2 配置hexo全局配置文件（请将生成的索引文件放在网站根目录或修改主题js文件的path值）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>3 新建一个页面，命名为 search 。命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page search</span><br></pre></td></tr></table></figure>
<p>4 编辑刚新建的页面，将页面的类型设置为 search</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: search</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;search&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>5 在主题配置文件启用本地搜索</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#本地搜索,请将索引文件放在网站根目录</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">    <span class="comment">#是否启用</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>主题将自动为这个页面显示搜索功能。</p>
<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 头部菜单，title: link</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives</span>  </span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否显示目录</span></span><br><span class="line"><span class="attr">TOC:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否自动播放音乐</span></span><br><span class="line"><span class="attr">autoplay:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认音乐（随机播放）</span></span><br><span class="line"><span class="attr">mp3:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">http://link.hhtjim.com/163/425570952.mp3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">http://link.hhtjim.com/163/425570952.mp3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页封面图, 为空时取文章的cover作为封面(注意跨域问题,建议使用同源图片)</span></span><br><span class="line"><span class="attr">welcome_cover:</span> <span class="string">/img/welcome-cover.jpg</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认文章封面图（随机调用,支持外链）</span></span><br><span class="line"><span class="attr">cover:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">/img/cover.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/img/welcome-cover.jpg</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 是否关闭默认滚动条</span></span><br><span class="line"><span class="attr">scrollbar:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地搜索,请将索引文件放在网站根目录,或修改主题js文件的path值</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">    <span class="comment"># 是否启用</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否显示 一言(hitokoto)</span></span><br><span class="line"><span class="attr">hitokoto:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接(可选:facebook,twitter,github,wechat,email)</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">    <span class="attr">facebook:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">twitter:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">wechat:</span> <span class="string">/img/logo.png</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">mailto:xxxx@gmail.com</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 备案</span></span><br><span class="line"><span class="attr">beian:</span> </span><br><span class="line">    <span class="comment"># 是否显示备案信息</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否在主页面最底下显示备案信息(虽然丑，但是完全满足规定要求)</span></span><br><span class="line">    <span class="attr">enableFooter:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 备案号</span></span><br><span class="line">    <span class="attr">beianInfo:</span> <span class="string">冀ICP备xxxxxxx号</span></span><br><span class="line">    <span class="comment"># 链接地址</span></span><br><span class="line">    <span class="attr">link:</span> <span class="string">http://www.beian.miit.gov.cn</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否使用mathjax</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Gitalk 评论插件（https://github.com/gitalk/gitalk）</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">    <span class="comment"># 是否启用评论功能</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 是否自动展开评论框</span></span><br><span class="line">    <span class="attr">autoExpand:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 应用编号</span></span><br><span class="line">    <span class="attr">clientID:</span> <span class="string">''</span></span><br><span class="line">    <span class="comment"># 应用秘钥</span></span><br><span class="line">    <span class="attr">clientSecret:</span> <span class="string">''</span></span><br><span class="line">    <span class="comment"># issue仓库名</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">''</span></span><br><span class="line">    <span class="comment"># Github名</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">''</span></span><br><span class="line">    <span class="comment"># Github名</span></span><br><span class="line">    <span class="attr">admin:</span> <span class="string">['']</span></span><br><span class="line">    <span class="comment"># Ensure uniqueness and length less than 50</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">location.pathname</span></span><br><span class="line">    <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">    <span class="attr">distractionFreeMode:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站关键字</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">Fechin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要使用google_analytics进行统计的话，这里需要配置ID</span></span><br><span class="line"><span class="attr">google_analytics:</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站ico</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/img/favicon.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rss文件</span></span><br><span class="line"><span class="attr">rss:</span> <span class="string">atom.xml</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Diaspora</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 基础使用</title>
    <url>/2020/05/13/Markdown%E2%80%94%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>如今，不少内容发布者都使用Markdown 发布内容，而我昨天刚建的基于<code>hexo</code>的博客，也需要使用Markdown，鉴于最近才真正接触Markdown，所以在建站完成伊始先写篇博客总结下Markdown 的使用规则及技巧。</p>
<h2 id="1-Markdown简介"><a href="#1-Markdown简介" class="headerlink" title="1. Markdown简介"></a>1. Markdown简介</h2><p>Markdown是一种轻量级的<code>标记语言</code>，由John Gruber在2004年创建，其核心思想是格式与内容分离，这也符合今天网页的思想。它允许人们使用纯文本格式编写文档，使用Markdown编写的文档可以导出html、word、图像、pdf、epub 等多种格式的文档，常用来发布博客内容。Markdown 文档的后缀为<code>.md</code>或者<code>.markdown</code>。</p>
<h2 id="2-Markdown基础语法"><a href="#2-Markdown基础语法" class="headerlink" title="2. Markdown基础语法"></a>2. Markdown基础语法</h2><p>基础语法包括“标题”、“字体”、“列表”、“区块”，“代码”，“链接”，“图片”，“表格”这8大部分，能满足绝大多数文章的写作需求。</p>
<h3 id="2-1-标题"><a href="#2-1-标题" class="headerlink" title="2.1 标题"></a>2.1 标题</h3><p>共有6种级别的标题，用<code>#</code>标识，注意<code>#</code>与标题之间应有一个空格,接下来的内容也有注意区分语法中有无空格。一级标题后面会有一条分隔线。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h3 id="2-2-字体"><a href="#2-2-字体" class="headerlink" title="2.2 字体"></a>2.2 字体</h3><p>Markdown段落没有特殊的格式，直接编写文字即可。段落的换行是两个以上的空格+回车，当然也可以在段落后面直接使用一个空行表示重新开始一个段落。事实上，很多版本直接回车也是可以的。</p>
<p>Markdown的字体格式主要是“斜体”，“加粗”，此外还有一些格式如“下划线”，“删除线”，“分隔线”等。</p>
<p>下划线：实际上使用的是HTML里的<code>&lt;u&gt;</code>标签实现的。</p>
<p>删除线：文字两端分别加上两个波浪线<code>~</code>。</p>
<p>分隔线：在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西，也可以在星号或是减号中间插入空格。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*斜体文本一*</span></span><br><span class="line"><span class="emphasis">_斜体文本二_</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**粗体文本一**</span></span><br><span class="line"><span class="strong">__粗体文本二__</span></span><br><span class="line"></span><br><span class="line"><span class="strong">***粗斜体文本一**</span>*</span><br><span class="line"><span class="strong">___粗斜体文本二__</span>_</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="bullet">- </span>- - - - -</span><br><span class="line"></span><br><span class="line"><span class="emphasis">***</span></span><br><span class="line"><span class="bullet">* </span><span class="emphasis">* *</span> <span class="emphasis">* *</span> *</span><br><span class="line"></span><br><span class="line">~~删除线~~ </span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线<span class="xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<hr>
<p><em>斜体文本一</em><br><em>斜体文本二</em></p>
<p><strong>粗体文本一</strong><br><strong>粗体文本二</strong></p>
<p><strong><em>粗斜体文本一</em></strong><br><strong><em>粗斜体文本二</em></strong></p>
<p><del>删除线</del></p>
<p><u>下划线</u></p>
<hr>
<h3 id="2-3-列表"><a href="#2-3-列表" class="headerlink" title="2.3 列表"></a>2.3 列表</h3><p>列表分有序列表和无须列表，前者使用形如<code>1.</code>直接标识，后者使用<code>*</code>、<code>+</code>或者<code>-</code>来标识。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>第一项</span><br><span class="line"><span class="bullet">* </span>第二项</span><br><span class="line"><span class="bullet">* </span>第三项</span><br><span class="line"></span><br><span class="line"><span class="bullet">+ </span>第一项</span><br><span class="line"><span class="bullet">+ </span>第二项</span><br><span class="line"><span class="bullet">+ </span>第三项</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>第一项</span><br><span class="line"><span class="bullet">- </span>第二项</span><br><span class="line"><span class="bullet">- </span>第三项</span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>第一项：</span><br><span class="line"><span class="bullet">    - </span>第一项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    - </span>第一项嵌套的第二个元素</span><br><span class="line"><span class="bullet">2. </span>第二项：</span><br><span class="line"><span class="bullet">    - </span>第二项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    - </span>第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ol>
<li>第一项：<ul>
<li>第一项嵌套的第一个元素</li>
<li>第一项嵌套的第二个元素</li>
</ul>
</li>
<li>第二项：<ul>
<li>第二项嵌套的第一个元素</li>
<li>第二项嵌套的第二个元素</li>
</ul>
</li>
</ol>
<hr>
<h3 id="2-4-区块"><a href="#2-4-区块" class="headerlink" title="2.4 区块"></a>2.4 区块</h3><p>Markdown 区块引用是在段落开头使用 <code>&gt;</code>符号 ，然后后面紧跟一个空格。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 引用1</span></span><br><span class="line"><span class="quote">&gt; 引用2</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 最外层</span></span><br><span class="line">&gt;&gt; 嵌套1</span><br><span class="line">&gt;&gt;&gt; 嵌套2</span><br><span class="line">&gt;&gt;&gt; - 第一项</span><br><span class="line">&gt;&gt;&gt; - 第二项</span><br><span class="line">&gt;&gt;&gt; - 第三项</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>最外层</p>
<blockquote>
<p>嵌套1</p>
<blockquote>
<p>嵌套2</p>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
</blockquote>
</blockquote>
</blockquote>
<hr>
<h3 id="2-5-代码"><a href="#2-5-代码" class="headerlink" title="2.5 代码"></a>2.5 代码</h3><p>如果是段落上的一个函数或片段的代码可以用反引号`把它包起来，如果是代码块可以在其前后两行分别使用```来包裹，也可选择在前面指定编程语言。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// your code is here</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>*argv[])</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"hello world"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;argc;i++)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;argv[i]&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-6-链接"><a href="#2-6-链接" class="headerlink" title="2.6 链接"></a>2.6 链接</h3><p>链接使用方法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">链接名称</span>](<span class="link">链接地址</span>)</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">直接使用链接地址</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">[<span class="string">My Blob</span>](<span class="link">https://hodge-zhang.gitee.io/</span>)</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">https:</span>//<span class="attr">hodge-zhang.github.io</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>

<hr>
<p><a href="https://hodge-zhang.gitee.io/" target="_blank" rel="noopener">My Blob</a></p>
<p><a href="https://hodge-zhang.github.io/" target="_blank" rel="noopener">https://hodge-zhang.github.io/</a></p>
<hr>
<h3 id="2-7-图片"><a href="#2-7-图片" class="headerlink" title="2.7 图片"></a>2.7 图片</h3><p>Markdown 图片语法格式如下：</p>
<ul>
<li>开头一个感叹号<code>！</code></li>
<li>接着一个方括号，里面放上图片无法加载时的替代文字，<code>[alt 属性文本]</code></li>
<li>最后是一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的<code>title</code> 属性的文字，(图片地址 “可选title”)</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">生命不息</span>](<span class="link">https://2020-05-13-my-pic-bed.oss-cn-beijing.aliyuncs.com/2020-05-picgo/bycle.jpg "生命"</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://2020-05-13-my-pic-bed.oss-cn-beijing.aliyuncs.com/2020-05-picgo/bycle.jpg" alt="生命不息" title="生命"></p>
<p>值得注意的是，Markdown写作的一个痛点就是图片的嵌入，它不像<code>.docx</code>那样文字与图片一起编码成一个独立的文件，Markdown是从外部通过统一资源定位符<code>URL</code>引入，这意味着带图片的Markdown文章要想在互联网上发布并被不同的人完整的看到，其图片必须在某个服务器上，由服务器来管理图片资源，管理图片的服务器就是图床了，目前我所使用的是阿里云的OSS自建的图床，从上面图片的链接中也可以看出来。关于图床的使用可以单独发出一篇文章来讲，这里就不多说了。</p>
<h3 id="2-8-表格"><a href="#2-8-表格" class="headerlink" title="2.8 表格"></a>2.8 表格</h3><p>Markdown 制作表格使用 <code>|</code> 来分隔不同的单元格，使用<code>-</code>来分隔表头和其他行。同时我们也可以设置表格的对齐对齐方式：</p>
<ul>
<li><code>-:</code>设置内容和标题栏居右对齐。</li>
<li><code>:-</code> 设置内容和标题栏居左对齐。</li>
<li><code>:-:</code> 设置内容和标题栏居中对齐。</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 居中对齐 | 右对齐 |</span><br><span class="line">| :-----| :---: | ----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>

<hr>
<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="center">居中对齐</th>
<th align="right">右对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="center">单元格</td>
<td align="right">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="center">单元格</td>
<td align="right">单元格</td>
</tr>
</tbody></table>
<hr>
<p>从Markdown表格源码中可以看到使用Markdown制作表格比较麻烦的，实际写作过程中，像制作表格、绘制流程图、绘制时序图等一般借助第三方工具完成。</p>
<h2 id="3-Markdown-相关工具"><a href="#3-Markdown-相关工具" class="headerlink" title="3. Markdown 相关工具"></a>3. Markdown 相关工具</h2><p>作为一种使用了十几年的工具，基于Markdown也衍生出了很多的工具，这里只推荐我所使用的。</p>
<ul>
<li>编辑工具：<a href="https://typora.io/" target="_blank" rel="noopener">Typora</a>，这篇文章即是使用这个工具写的，软件做的很棒，堪称优雅。</li>
<li>图片管理：<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a>，功能齐全的图片管理工具，支持大多数图床，和Typora完美适配。</li>
<li>自建图床：<a href="https://cn.aliyun.com/" target="_blank" rel="noopener">阿里云</a>，作为国内商业化最好的云产品，40G OSS对象存储空间一年只需9RMB，是建立自己的云的不二之选了。</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Pthread共享内存编程</title>
    <url>/2020/05/14/Pthreads%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>本篇文章主要介绍下使用POSIX线程库，即Pthread在<code>共享内存系统</code>中进行多线程编程的基础范式，涉及的Pthread中的互斥量<code>pthread_mutex_t</code>、条件变量<code>pthread_cond_t</code>以及<code>&lt;semaphore.h&gt;</code>中的信号量的基础使用。主要参考Peter S.Pacheco所著的《An Introduction to Parallel Programming》。在正文开始之前，有必要回顾以下概念：</p>
<ul>
<li><code>共享内存系统</code>：共享内存系统中的任意处理器核都能够访问所有的内存区域。因此，协调各个处理器核工作的一个方法，就是把某个内存区域设为“共享”，这是并行编程中常见的方法。</li>
</ul>
<p><img src="https://2020-05-13-my-pic-bed.oss-cn-beijing.aliyuncs.com/2020-05-picgo/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%B3%BB%E7%BB%9F.jpg" alt="图1：共享内存系统"></p>
<ul>
<li><p><code>临界区</code>：对共享内存区域进行更新的代码段称为临界区。</p>
</li>
<li><p><code>进程</code>：进程是正在运行（或挂起）的程序的一个实例，由操作系统管理。它包括：</p>
<ol>
<li><p>代码段</p>
</li>
<li><p>栈段</p>
</li>
<li><p>堆段。</p>
</li>
<li><p>系统为进程分配的资源描述符，如文件描述符等。</p>
</li>
<li><p>安全信息，如进程允许访问的硬件和软件资源。</p>
</li>
<li><p>描述进程状态的信息，如进程是否准备运行或者正在等待某个资源，寄存器中的内容（包括程序计数器数值）等。</p>
</li>
</ol>
</li>
<li><p><code>线程</code>：它来自于“控制线程”的概念，控制线程是程序中的一个语句序列，也可以说是进程中的一个单一顺序的控制流，是cpu调度的基本单位。</p>
</li>
<li><p><code>缓存一致性</code>：指在采用层次结构存储系统的计算机系统中，cpu不同核的 catch中的数据与主存中的数据保持相同。为了达到缓存一致性的目的，出现了多种缓存一致性协议，常用的是<code>窥探（snooping）协议</code>。</p>
</li>
<li><p><code>伪共享</code>：线程并不共享任何东西（除了一个缓存行），但线程对内存访问的行为好像它们正在共享一个变量，因此把这种现象命名为伪共享。</p>
</li>
<li><p><code>线程安全</code>：如果一个代码块能够被多个线程同时执行而不引起问题，那么它是线程安全的。</p>
</li>
<li><p><code>互斥量(mutex)</code>：可以被看做是临界区的一把锁，它是一个特殊类型的变量，通过某些特殊类型的函数，互斥量可以用来限制每次只有一个线程能进入临界区，以保证对临界区的互斥 访问。</p>
</li>
<li><p><code>信号量(semaphore)</code>：是一个有两个操作（<code>sem_wait</code>和<code>sem_post</code>）的无符号型整数。如果信号量是正的，对<code>sem_wait</code>的调用就简单地将信号量减1；如果信号量是零，调用<code>sem_wait</code>的线程就会阻塞直到信号量为正数，此时信号量会减1，然后线程从调用中返回。<code>sem_post</code>操作使信号量加1。信号量比互斥量功能更强，因为它们能够初始化为任何非负值。而且，因为信号量没有“归属权”，任何线程都能够对锁上的信号量进行解锁。</p>
</li>
<li><p><code>条件变量(conditional variable)</code>：是一个特殊的线程对象，它用来挂起一个线程的执行直到某个条件发生。一旦条件发生，另一个线程能够用一个条件信号或一个条件广播唤醒挂起的线程。</p>
</li>
<li><p><code>路障(barrier)</code>是程序中的一个结点，线程必须阻塞直到所有的线程都到达了这个结点。路障另一个非常重要的应用是调试程序。</p>
</li>
</ul>
<h2 id="1-多线程的Hello-World"><a href="#1-多线程的Hello-World" class="headerlink" title="1. 多线程的Hello World"></a>1. 多线程的Hello World</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* File:  </span></span><br><span class="line"><span class="comment"> *    pth_hello.c</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Purpose:</span></span><br><span class="line"><span class="comment"> *    Illustrate basic use of pthreads:  create some threads,</span></span><br><span class="line"><span class="comment"> *    each of which prints a message.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Input:</span></span><br><span class="line"><span class="comment"> *    none</span></span><br><span class="line"><span class="comment"> * Output:</span></span><br><span class="line"><span class="comment"> *    message from each thread</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Compile:  gcc -g -Wall -o pth_hello pth_hello.c -lpthread</span></span><br><span class="line"><span class="comment"> * Usage:    ./pth_hello &lt;thread_count&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * IPP:   Section 4.2 (p. 153 and ff.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_THREADS = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global variable:  accessible to all threads */</span></span><br><span class="line"><span class="keyword">int</span> thread_count;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Usage</span><span class="params">(<span class="keyword">char</span>* prog_name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">Hello</span><span class="params">(<span class="keyword">void</span>* rank)</span></span>;  <span class="comment">/* Thread function */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*--------------------------------------------------------------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">   <span class="keyword">long</span>       thread;  <span class="comment">/* Use long in case of a 64-bit system */</span></span><br><span class="line">   <span class="keyword">pthread_t</span>* thread_handles; </span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Get number of threads from command line */</span></span><br><span class="line">   <span class="keyword">if</span> (argc != <span class="number">2</span>) Usage(argv[<span class="number">0</span>]);</span><br><span class="line">   thread_count = strtol(argv[<span class="number">1</span>], <span class="literal">NULL</span>, <span class="number">10</span>);  </span><br><span class="line">   <span class="keyword">if</span> (thread_count &lt;= <span class="number">0</span> || thread_count &gt; MAX_THREADS) Usage(argv[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">   thread_handles = <span class="built_in">malloc</span> (thread_count*<span class="keyword">sizeof</span>(<span class="keyword">pthread_t</span>)); </span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (thread = <span class="number">0</span>; thread &lt; thread_count; thread++)  </span><br><span class="line">      pthread_create(&amp;thread_handles[thread], <span class="literal">NULL</span>,</span><br><span class="line">          Hello, (<span class="keyword">void</span>*) thread);  </span><br><span class="line"></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Hello from the main thread\n"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (thread = <span class="number">0</span>; thread &lt; thread_count; thread++) </span><br><span class="line">      pthread_join(thread_handles[thread], <span class="literal">NULL</span>); </span><br><span class="line"></span><br><span class="line">   <span class="built_in">free</span>(thread_handles);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  <span class="comment">/* main */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-------------------------------------------------------------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">Hello</span><span class="params">(<span class="keyword">void</span>* rank)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">long</span> my_rank = (<span class="keyword">long</span>) rank;  <span class="comment">/* Use long in case of 64-bit system */</span> </span><br><span class="line"></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Hello from thread %ld of %d\n"</span>, my_rank, thread_count);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;  <span class="comment">/* Hello */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-------------------------------------------------------------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Usage</span><span class="params">(<span class="keyword">char</span>* prog_name)</span> </span>&#123;</span><br><span class="line">   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"usage: %s &lt;number of threads&gt;\n"</span>, prog_name);</span><br><span class="line">   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"0 &lt; number of threads &lt;= %d\n"</span>, MAX_THREADS);</span><br><span class="line">   <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;  <span class="comment">/* Usage */</span></span><br></pre></td></tr></table></figure>

<p>对以上程序的解读：</p>
<ol>
<li><p><code>pthread_t</code>数据结构用来存储线程的专有信息，它由<code>pthread.h</code>声明。要注意的是，<code>pthread_t</code>对象是一个不透明对象。对象中存储的数据都是系统绑定的，用户级代码无法直接访问到里面的数据。</p>
</li>
<li><p>下面是<code>pthread_create</code>函数的参数信息。<br>第一个参数是一个指针，指向对应的<code>pthread_t</code>对象。注意，<code>pthread_t</code>对象不是由<code>pthread_create</code>函数分配的，必须在调用<code>pthread_create</code>函数前就为<code>pthread_t</code>对象分配内存空间。<br>第二个参数一般不用，所以只是在函数调用时把NULL传递给参数。<br>第三个参数表示该线程将要运行的函数，下面会具体讲；<br>最后一个参数也是一个指针，指向传给函数start_routine的参数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_create</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	pthread.t* thread-p,			</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">const</span> <span class="keyword">pthread_attr_t</span>* attr_p,				</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">void</span>* (*start_routine)(<span class="keyword">void</span>*),</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">void</span>* arg_p					</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>由<code>pthread_create</code>生成并运行的函数应该有一个类似于下面函数的原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">thread_function</span><span class="params">(<span class="keyword">void</span>* args_p)</span></span>;</span><br></pre></td></tr></table></figure>

<p>因为类型<code>void*</code>可以转换为C语言中任意指针类型，所以args_p可以指向一个列表，该列表包含一个或多个thread_function函数需要的数值。其返回值亦是如此。通常，参数列表里会传入一个int型<code>rank</code>参数，用于给线程显式的编号，以便于多线程代码的调试。注意，当线程结束时，由于它的函数的类型有一个返回值，那么线程就应该返回一个值。在本例中，线程没有需要特别返回的值，所以只返回NULL。</p>
</li>
<li><p><code>pthread_join</code>函数用于合并<code>pthread_create</code>创建的线程到主线程。第二个参数可以接收任意由<code>pthread_t</code>对象所关联的那个线程产生的返回值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_join</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">pthread_t</span> thread,		</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">void</span>** ret_val_p			</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="2-临界区问题"><a href="#2-临界区问题" class="headerlink" title="2. 临界区问题"></a>2. 临界区问题</h2><p>共享内存的确使得多线程之间变量的共享变得方便了许多，但同时也带来了一个很大的问题：当多个线程尝试更新同一个共享变量时，会出问题。因此，多线程的程序应该保证一次只允许一个线程执行同一临界区的代码段。解决这个问题的方法主要有：</p>
<ul>
<li><p>忙等待：设置一个共享的int型变量flag，只有flag等于当前线程的rank时，当前线程才能访问临界区，否则忙等待，处于忙等待的线程仍然在持续使用CPU。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(flag!=my_rank);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">临界区</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">flag++;</span><br></pre></td></tr></table></figure>

<p>有时候编译器进行编译优化时为了充分利用寄存器，可能会将临界区代码提到while之前，这将导致忙等待失效，因此进行相关实验时关闭编译优化的选项是个好办法。</p>
</li>
<li><p>互斥量：Pthreads标准为互斥量提供了一个特殊类型：<code>pthread_mutex_t</code>。在使用<code>pthread_mutex_t</code>类型的变量前，必须由系统对其进行初始化，初始化函数如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_init</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">pthread_mutext* mutex-p,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> <span class="keyword">pthread_mutex_attr_t</span>* attr-p 	</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure>

<p>我们不使用第二个参数，给这个参数赋值NULL即可。当一个Pthreads程序使用完互斥量后，它应该调用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_destroy</span><span class="params">(<span class="keyword">pthread_mutex_t</span>* mutex_p)</span></span>;</span><br></pre></td></tr></table></figure>

<p>要获得临界区的访问权，线程需调用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_lock</span><span class="params">(<span class="keyword">pthread_mutex_t</span>* mutex_p)</span></span>;</span><br></pre></td></tr></table></figure>

<p>当线程退出临界区后，它应该调用：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">int pthread_mutex_unlock(pthread_mutex_t* mutex_p)；</span><br></pre></td></tr></table></figure>

<p>调用<code>pthread_mutex_lock</code>会使线程等待，直到没有其他线程进入临界区；调用<code>pthread_mutex_unlock</code> 则通知系统该线程已经完成了临界区中代码的执行。</p>
<p>如果把线程数增加到超过核的个数，那么采用互斥量程序的性能仍然维持不变，但忙等待程序的性能就会下降。尽管忙等待总是浪费CPU的资源，但它是我们至今所知的，能事先确定线程执行临界区代码顺序的最适合方法：线程0最先执行，然后线程1，接下来线程2等。如果采用互斥量，那么哪个线程先进人临界区以及此后的顺序由系统随机选取。</p>
</li>
<li><p>信号量：信号量可以认为是一种特殊类型的unsigned int无符号整型变量，可以赋值为0、1、2、…。大多数情况下，只给它们赋值0和1，这种只有0和1值的信号量称为二元信号量。<br>信号量与互斥量最大的区别在于信号量是没有个体拥有权的，主线程将所有的信号量初始化为0，即“加锁”，其他线程都能对任何信号量调用<code>sem_post</code>和<code>sem_wait</code>函数。<br>不同信号量函数的语法为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_init</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">sem_t</span>* semaphore_p, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> shared, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">unsigned</span> initial_val</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_destroy</span><span class="params">(<span class="keyword">sem_t</span>* semaphore_p)</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_post</span><span class="params">(<span class="keyword">sem_t</span>* semaphore_p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_wait</span><span class="params">(<span class="keyword">sem_t</span>* semaphore_p)</span></span>;</span><br></pre></td></tr></table></figure>

<p>我们不使用<code>sem_init</code>函数的第二个参数，对这个参数只需传人常数0即可。注意，信号量不是Pthreads线程库的一部分，所以需要在使用信号量的程序开头加头文件。</p>
</li>
<li><p>条件变量：它是一个数据对象，允许线程在某个特定条件或事件发生前都处于挂起状态。当事件或条件发生时，另一个线程可以通过信号来唤醒挂起的线程。一个条件变量总是与一个互斥量相关联。<br>Pthreads线程库中的条件变量类型为<code>pthread_cond_t</code>。函数</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">int pthread_cond_signal(pthread_cond_t* cond_var_p)；</span><br></pre></td></tr></table></figure>

<p>的作用是解锁一个阻塞的线程，而函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_broadcast</span><span class="params">(<span class="keyword">pthread_cond_t</span>* cond_var_p)</span></span>;</span><br></pre></td></tr></table></figure>

<p>的作用是解锁所有被阻塞的线程。函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_wait</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">pthread_cond_t</span>* cond_var_p,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">pthread_mutex_t</span>* mutex_p</span></span></span><br><span class="line"><span class="function"><span class="params">）；</span></span></span><br></pre></td></tr></table></figure>

<p>的作用是通过互斥量<code>mutex_p</code>来阻塞线程，直到其他线程调用<code>pthread_cond_signal</code>或者<code>pthread_cond_broadcast</code>来解锁它。当线程解锁后，它重新获得互斥量。所以实际上，<code>pthread_cond_wait</code>相当于按顺序执行了以下的函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pthread_mutex_unlock(&amp; mutex_p); </span><br><span class="line">wait_on_signal(&amp; cond_var_p); </span><br><span class="line">pthread_mutex_lock(&amp; mutex_p):</span><br></pre></td></tr></table></figure>

<p>与互斥量和信号量一样，条件变量也应该初始化和销毁。对应的函数是</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_init</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">pthread_cond_t</span>* cond_p,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> <span class="keyword">pthread_cond_attr_t</span>* cond_attr_p</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br><span class="line">int pthread_cond_destroy(pthread_cond_t* cond_p)：</span><br></pre></td></tr></table></figure>

<p>我们一般不使用<code>pthread_cond_init</code>的第二个参数（调用函数时传递NULL作为参数值）。</p>
</li>
</ul>
<h2 id="3-实现读写锁"><a href="#3-实现读写锁" class="headerlink" title="3. 实现读写锁"></a>3. 实现读写锁</h2><p>读写锁实现方式有很多种，这里的是使用互斥量核条件变量来实现。</p>
<p>互斥量用于保护读写锁的数据：无论何时一个线程调用其中的任意一个函数（读锁、写锁、解锁），它必须首先锁互斥量，并且无论何时一个线程完成了这些函数调用中的一个，它必须解锁互斥量。在获取互斥量后，线程检查合适的数据成员来决定接下来干什么。例如，如果它想要进行读访问，就检查是否有一个写者当前拥有锁。如果没有，它对活动读者（即同时读的线程）的数量加1，然后继续执行随后的操作。如果有一个活动写者（有一个写者拥有锁，正在写），就为等待获取锁的读者的数量加1，并且在读者条件变量上启动一个条件等待。当它被条件唤醒后，它将正在等待的读者的数量减1，对活动读者的数量加1，并继续执行随后的操作。写锁函数的实现与读锁函数相类似。</p>
<p>解锁函数的操作取决于线程是一个读者还是一个写者。如果线程是一个读者，且没有其他的活动读者，并且一个写者正在等待，那么它就在返回前发送信号通知写者，使写者继续后继的操作。另一方面，如果线程是写者，则可能同时有读者和写者正在等待，因此线程需要决定它倾向于读者还是写者。因为写者必须互斥访问，很可能写者更难获得锁。因此，给予写者优先权。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">rw_lock_t</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> NoOfReaders;	<span class="comment">// 读者数量</span></span><br><span class="line">    <span class="keyword">int</span> NoOfWriters, NoOfWritersWaiting;	<span class="comment">// 写者-等待数量</span></span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> class_mutex;	<span class="comment">// 互斥量</span></span><br><span class="line">    <span class="keyword">pthread_cond_t</span>  reader_con;	<span class="comment">// 读者条件变量</span></span><br><span class="line">    <span class="keyword">pthread_cond_t</span>  writer_con;	<span class="comment">// 写者条件变量</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 写-写 互斥</span></span><br><span class="line"><span class="comment">	* 写-读 互斥</span></span><br><span class="line"><span class="comment">	* 读-读 共享</span></span><br><span class="line"><span class="comment">	* 读-写 互斥</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">// 构造</span></span><br><span class="line">    <span class="keyword">rw_lock_t</span>()</span><br><span class="line">    : NoOfReaders(<span class="number">0</span>), NoOfWriters(<span class="number">0</span>), NoOfWritersWating(<span class="number">0</span>),</span><br><span class="line">      class_mutex(PTHREAD_MUTEX_INITIALIZER),</span><br><span class="line">      reader_con(PTHREAD_COND_INITIALIZER),</span><br><span class="line">      writer_con(PTHREAD_COND_INITIALIZER)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">	<span class="comment">// 析构</span></span><br><span class="line">    ~<span class="keyword">rw_lock_t</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_mutex_destroy(&amp;class_mutex);</span><br><span class="line">        pthread_cond_destroy(&amp;reader_con);</span><br><span class="line">        pthread_cond_destroy(&amp;writer_con);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 读锁</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">r_lock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        pthread_mutex_lock(&amp;class_mutex);</span><br><span class="line">        <span class="comment">//while(NoOfWriters&gt;0 || NoOfWritersWaiting&gt;0)	// 写者优先</span></span><br><span class="line">        <span class="keyword">while</span>(NoOfWriters&gt;<span class="number">0</span>)	</span><br><span class="line">        &#123;</span><br><span class="line">            pthread_cond_wait(&amp;reader_con, &amp;class_mutex);</span><br><span class="line">        &#125;</span><br><span class="line">        NoOfReaders++;        </span><br><span class="line">        pthread_mutex_unlock(&amp;class_mutex);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 写锁</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">w_lock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        pthread_mutex_lock(&amp;class_mutex);</span><br><span class="line">        NoOfWritersWaiting++;</span><br><span class="line">        <span class="keyword">while</span>(NoOfReaders&gt;<span class="number">0</span> || NoOfWriters&gt;<span class="number">0</span>)	<span class="comment">// 锁被占用则等待</span></span><br><span class="line">        &#123;</span><br><span class="line">            pthread_cond_wait(&amp;writer_con, &amp;class_mutex);</span><br><span class="line">        &#125;</span><br><span class="line">        NoOfWritersWaiting--; NoOfWriters++;</span><br><span class="line">        pthread_mutex_unlock(&amp;class_mutex);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 读解锁</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">r_unlock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        pthread_mutex_lock(&amp;class_mutex);</span><br><span class="line">        NoOfReaders--;</span><br><span class="line">        <span class="keyword">if</span>(NoOfReaders==<span class="number">0</span> &amp;&amp; NoOfWritersWaiting&gt;<span class="number">0</span>)</span><br><span class="line">            pthread_cond_signal(&amp;writer_con);</span><br><span class="line">        pthread_mutex_unlock(&amp;class_mutex);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 写解锁</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">w_unlock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        pthread_mutex_lock(&amp;class_mutex);</span><br><span class="line">        NoOfWriters--;</span><br><span class="line">        <span class="keyword">if</span>(NoOfWritersWaiting&gt;<span class="number">0</span>)</span><br><span class="line">            pthread_cond_signal(&amp;writer_con);</span><br><span class="line">        <span class="comment">//else	// 写者优先——直到没有写者才解锁读者</span></span><br><span class="line">        pthread_cond_broadcast(&amp;reader_con);</span><br><span class="line">        pthread_mutex_unlock(&amp;class_mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Pthread</tag>
      </tags>
  </entry>
  <entry>
    <title>Head First Java 摘录</title>
    <url>/2020/05/16/Head-First-Java%E6%91%98%E5%BD%95/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>与C++对比，学习Java，重点突出Java语言与C++相别的地方。</p>
<p><img src="https://2020-05-13-my-pic-bed.oss-cn-beijing.aliyuncs.com/2020-05-picgo/deals-java-670x335.jpg" alt="deals-java-670x335"></p>
<h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h2><h4 id="1-1-问：其他程序语言可以直接用整数类型测试，我也可以像下面这么做吗？"><a href="#1-1-问：其他程序语言可以直接用整数类型测试，我也可以像下面这么做吗？" class="headerlink" title="1.1 问：其他程序语言可以直接用整数类型测试，我也可以像下面这么做吗？"></a>1.1 问：其他程序语言可以直接用整数类型测试，我也可以像下面这么做吗？</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(a)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>答：：不行，Java中的<code>integer</code>与<code>boolean</code>两种类型并不相容。你只能用下面这样的<code>boolean</code>变量来做条件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> b=<span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(a==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-Java源文件的声明规则"><a href="#1-2-Java源文件的声明规则" class="headerlink" title="1.2 Java源文件的声明规则"></a>1.2 Java源文件的声明规则</h4><p>当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意以下规则：</p>
<ul>
<li>一个源文件中只能有一个public类</li>
<li>一个源文件可以有多个非public类</li>
<li>源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。</li>
<li>如果一个类定义在某个包中，那么package语句应该在源文件的首行。</li>
<li>如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。</li>
<li>import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</li>
</ul>
<p>类有若干种访问级别，并且类也分不同的类型：抽象类和final类等。除了上面提到的几种类型，Java还有一些特殊的类，如：内部类、匿名类。</p>
<h4 id="1-3-Java包-package"><a href="#1-3-Java包-package" class="headerlink" title="1.3 Java包(package)"></a>1.3 Java包(package)</h4><p>包主要用来对类和接口进行分类。当开发Java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。</p>
<h4 id="1-4-import-语句"><a href="#1-4-import-语句" class="headerlink" title="1.4 import 语句"></a>1.4 import 语句</h4><p>在Java中，如果给出一个完整的限定名，包括包名、类名，那么Java编译器就可以很容易地定位到源代码或者类。Import语句就是用来提供一个合理的路径，使得编译器可以找到某个类。</p>
<h4 id="1-5-Java-变量类型"><a href="#1-5-Java-变量类型" class="headerlink" title="1.5 Java 变量类型"></a>1.5 Java 变量类型</h4><p>Java语言支持的变量类型有：</p>
<ul>
<li><p>局部变量：类的方法中的变量。</p>
<ol>
<li>局部变量声明在方法、构造方法或者语句块中；</li>
<li>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；</li>
<li>访问修饰符不能用于局部变量；</li>
<li>局部变量只在声明它的方法、构造方法或者语句块中可见；</li>
<li>局部变量是在栈上分配的。</li>
<li>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</li>
</ol>
</li>
<li><p>实例变量（成员变量）：独立于方法之外的变量，不过没有 static 修饰。  </p>
<ol>
<li>实例变量声明在一个类中，但在方法、构造方法和语句块之外；</li>
<li>当一个对象被实例化之后，每个实例变量的值就跟着确定；</li>
<li>实例变量在对象创建的时候创建，在对象被销毁的时候销毁；</li>
<li>实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；</li>
<li>实例变量可以声明在使用前或者使用后；</li>
<li>访问修饰符可以修饰实例变量；</li>
<li>实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；</li>
<li>实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；</li>
<li>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：<em>ObejectReference.VariableName</em>。</li>
</ol>
</li>
<li><p>类变量（静态变量）：独立于方法之外的变量，用 static 修饰。</p>
<ol>
<li>类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。</li>
<li>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</li>
<li>静态变量除了被声明为常量外很少使用。常量是指声明为public/private，final和static类型的变量。常量初始化后不可改变。</li>
<li>静态变量储存在静态存储区。经常被声明为常量，很少单独使用static声明变量。</li>
<li>静态变量在第一次被访问时创建，在程序结束时销毁。</li>
<li>与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为public类型。</li>
<li>默认值和实例变量相似。数值型变量默认值是0，布尔型默认值是false，引用类型默认值是null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</li>
<li>静态变量可以通过：<em>ClassName.VariableName</em>的方式访问。</li>
<li>类变量被声明为public static final类型时，类变量名称一般建议使用大写字母。如果静态变量不是public和final类型，其命名方式与实例变量以及局部变量的命名方式一致。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String strName;	<span class="comment">// 私有成员变量</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> staticVar;	<span class="comment">// 静态变量，默认初始化为0</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> staticVar2;	<span class="comment">// 公共的静态变量，默认初始化为0.0d</span></span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]argv)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">byte</span> localVar=<span class="number">99</span>;	<span class="comment">// 局部变量	System.out.println("val1:"+staticVar+"\nvar2:"+staticVar2);</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="1-6-修饰符"><a href="#1-6-修饰符" class="headerlink" title="1.6 修饰符"></a>1.6 修饰符</h4><p>Java语言提供了很多修饰符，主要分为以下两类：</p>
<ul>
<li>访问修饰符<ol>
<li><strong>default</strong> (即默认，没有对应的关键字修饰）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li>
<li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li>
<li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li>
<li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</li>
</ol>
</li>
<li>非访问修饰符<ol>
<li>static 修饰符，用来修饰类方法和类变量。</li>
<li>final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</li>
<li>abstract 修饰符，用来创建抽象类和抽象方法。</li>
<li>synchronized 修饰符，synchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。</li>
<li>transient 修饰符，序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。</li>
<li>volatile 修饰符，volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。</li>
</ol>
</li>
</ul>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>当前类</th>
<th>同一包内</th>
<th>子孙类(同一包)</th>
<th>子孙类(不同包)</th>
<th>其他包</th>
</tr>
</thead>
<tbody><tr>
<td><code>public</code></td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td><code>protected</code></td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y/N</td>
<td>N</td>
</tr>
<tr>
<td><code>default</code></td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
<td>N</td>
</tr>
<tr>
<td><code>private</code></td>
<td>Y</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>N</td>
</tr>
</tbody></table>
<p>protected 需要从以下两个点来分析说明：</p>
<ul>
<li><strong>子类与基类在同一包中</strong>：被声明为 protected 的变量、方法和构造器能被同一个包中的任何其他类访问；</li>
<li><strong>子类与基类不在同一包中</strong>：那么在子类中，子类实例可以访问其从基类继承而来的 protected 方法，而不能访问基类实例的protected方法。</li>
</ul>
<h4 id="1-7"><a href="#1-7" class="headerlink" title="1.7"></a>1.7</h4>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>20个面试常见Linux命令</title>
    <url>/2020/05/19/20%E4%B8%AA%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81Linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<blockquote>
<p>今天总结几个非常常用的Linux命令，其中有几个在面试中很可能问相关命令的原理，比如后台运行命令。希望对大家有所帮助，最好自己去尝试在Linux操作系统中实践一下。</p>
</blockquote>
<p><img src="https://2020-05-13-my-pic-bed.oss-cn-beijing.aliyuncs.com/2020-05-picgo/image-20200519165218219.png" alt="20个常用的Linux命令"></p>
<h2 id="1-查看目录以及权限"><a href="#1-查看目录以及权限" class="headerlink" title="1. 查看目录以及权限"></a>1. 查看目录以及权限</h2><blockquote>
<p>在 Linux 中，通常使用 <code>ls -l</code>列出，其中可以查看文件属性，所属用户组等较为详细的信息。下面详细解释从左到右每一列是什么意思</p>
</blockquote>
<p><img src="https://2020-05-13-my-pic-bed.oss-cn-beijing.aliyuncs.com/2020-05-picgo/image-20200519170311297.png" alt="image-20200519170311297"></p>
<p>第一列第一个字段：文件类型，后面9个字符是模式，其中分为三组，每一组三个字段。第一组为所属用户权限。第二组为所属组的权限。第三组为其他用户所属权限。其中r(read)代表可读，w(write)代表可写，e(execute)代表可执行。在后面的9个字符中，如果是字母说明有相应的权限，如果为”-“代表没有权限。举一个例子</p>
<p><code>-rw-r-r--</code>:此为普通文件，对于所属用户为可读可写不能执行，对于所属组仅仅可读，对于其他用户仅为读。</p>
<p>第二列 硬链接数目</p>
<blockquote>
<p>硬链接允许作用之一是允许一个文件拥有多个有效路径名，从而防止误删。但是只能在同一文件系统中的文件之间进行连接，不能对目录进行创建。</p>
</blockquote>
<p>第三列是所属用户，第四列为所属组，第五列为文件大小，第六列为文件被修改的时间，最后为文件名。其中使用<code>chown</code>改变所属用户，<code>chgrp</code>改变所属组。</p>
<h2 id="2-nohup-no-hang-up-不要挂起的意思"><a href="#2-nohup-no-hang-up-不要挂起的意思" class="headerlink" title="2. nohup(no hang up 不要挂起的意思)"></a>2. nohup(no hang up 不要挂起的意思)</h2><blockquote>
<p>这也是常用后台启动程序的常用方法，如果在交互命令行中运行程序，我们很容易就终止它。在交互环境下，我们的输出一般都会直接输出到当前界面，在后台启动的时候通常会定向到文件，那通常情况是下面这个命令。</p>
</blockquote>
<p><code>nohup command &gt;X.file 2 &gt;&amp;1 &amp;</code></p>
<blockquote>
<p>其中1表示标准输出。2表示文件标准错误输出。<code>2&gt;1&amp;</code>即将两者合并，但是合并到哪里，就是<code>X.file</code>.</p>
</blockquote>
<h2 id="3-查看进程"><a href="#3-查看进程" class="headerlink" title="3. 查看进程"></a>3. 查看进程</h2><blockquote>
<p>有的时候我们需要查看进程是否已经启动或者尝试终止进程。经常使用的命令为 <code>ps -ef---</code> 列出当前正在运行的程序，那如何定位我们想要查看的进程A，这个时候使用grep，即 <code>ps -ef| grep A</code> .</p>
</blockquote>
<h2 id="4-awk"><a href="#4-awk" class="headerlink" title="4. awk"></a>4. awk</h2><blockquote>
<p>如果文件是csv(a.csv)，按照”,”分割，需求为打印第一列和第二列</p>
</blockquote>
<p><code>awk -F &quot;,&quot; &#39;{print 2}&#39; a.csv</code></p>
<blockquote>
<p>获取第三列最大值</p>
</blockquote>
<p><code>awk &#39;BEGIN{max=0}{if(3&gt;max)max=3}END{print max}&#39;</code></p>
<h2 id="5-tar解压缩"><a href="#5-tar解压缩" class="headerlink" title="5. tar解压缩"></a>5. tar解压缩</h2><blockquote>
<p>解压缩命令</p>
</blockquote>
<p>常用参数</p>
<blockquote>
<p>-c:创建的tar文件<br>-x:解开tar文件<br>-t:列出tar文件中包含的文件信息<br>-r：附加新的文件到tar文件中</p>
</blockquote>
<p>常用命令组合</p>
<p><code>tar -xvf /home/a.tar</code> //打开tar打包文件<br><code>tar -zxvf /home/a.tar.gz</code> //解压以gzip压缩的文件<br><code>tar -jxvf /home/a.tar.bz2</code> //解压以bzip压缩的文件<br><code>tar -cvf /home/a.tar /home</code> 打包/home下所有文件</p>
<h2 id="6-scp"><a href="#6-scp" class="headerlink" title="6. scp"></a>6. scp</h2><blockquote>
<p>通过<code>scp</code>命令在多台服务器中的相互复制 传输文件。为了省下输入密码，可以设置免密登录。</p>
</blockquote>
<p>常用组合：</p>
<p>例子1：将A服务器中/home/a.txt 复制到B服务器的/home中</p>
<p><code>scp -r /home/a.txt root@B_ip:/home</code></p>
<h2 id="7-不敢用的命令-rm-rf"><a href="#7-不敢用的命令-rm-rf" class="headerlink" title="7. 不敢用的命令 rm -rf"></a>7. 不敢用的命令 rm -rf</h2><blockquote>
<p>保持清醒，慎用！</p>
</blockquote>
<h2 id="8-watch"><a href="#8-watch" class="headerlink" title="8. watch"></a>8. watch</h2><blockquote>
<p>这个命令是动态查看命令执行的结果。比如如果需要每隔一秒高亮显示网络连接数的变化情况。则 <code>watch -n 1 -d netstat -ant</code></p>
</blockquote>
<p>例子：每隔一秒高亮显示http连接数的变化情况</p>
<p><code>watch -n 1 -d &#39;pstree | grep http&#39;</code></p>
<p>例子:十秒一次输出系统的平均负载</p>
<p><code>watch -n 10 &#39;cat /proc/loadavg&#39;</code></p>
<h2 id="9-df"><a href="#9-df" class="headerlink" title="9. df"></a>9. df</h2><blockquote>
<p>查看磁盘大小</p>
</blockquote>
<p><code>df -h</code></p>
<h2 id="10-tcpdump"><a href="#10-tcpdump" class="headerlink" title="10. tcpdump"></a>10. tcpdump</h2><blockquote>
<p>和它类似的工具在windows中是wireshark，其采用底层库winpcap/libpcap实现。采用了bpf过滤机制。下面我们看看提供的不同参数的含义。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">参数名</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-n</td>
<td align="left">使用IP地址表示主机。使用数字表示端口</td>
</tr>
<tr>
<td align="left">-i</td>
<td align="left">指定要监听的端口。如果为”-i any”表示住区所有网卡数据包</td>
</tr>
<tr>
<td align="left">-v</td>
<td align="left">输出诸如ip数据包中的TTL更加详细的信息</td>
</tr>
<tr>
<td align="left">-t</td>
<td align="left">不打印时间戳</td>
</tr>
<tr>
<td align="left">-e</td>
<td align="left">显示以太网帧头部信息</td>
</tr>
<tr>
<td align="left">-c</td>
<td align="left">仅仅抓取指定数量的数据包</td>
</tr>
<tr>
<td align="left">-x</td>
<td align="left">按照十六进制显示数据包内容</td>
</tr>
<tr>
<td align="left">-X</td>
<td align="left">不仅仅输出-x结果还输出十六进制对应的ASCII字符</td>
</tr>
<tr>
<td align="left">-s</td>
<td align="left">设置抓包时的抓包长度</td>
</tr>
<tr>
<td align="left">-w</td>
<td align="left">将输出结果定向到某个文件，一般为pcap后缀</td>
</tr>
<tr>
<td align="left">-r</td>
<td align="left">从文件读取数据包并显示数字表示端口</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>-i</th>
<th>指定要监听的端口。如果为”-i any”表示住区所有网卡数据包</th>
</tr>
</thead>
<tbody><tr>
<td>-v</td>
<td>输出诸如ip数据包中的TTL更加详细的信息</td>
</tr>
<tr>
<td>-t</td>
<td>不打印时间戳</td>
</tr>
<tr>
<td>-e</td>
<td>显示以太网帧头部信息</td>
</tr>
<tr>
<td>-c</td>
<td>仅仅抓取指定数量的数据包</td>
</tr>
<tr>
<td>-x</td>
<td>按照十六进制显示数据包内容</td>
</tr>
<tr>
<td>-X</td>
<td>不仅仅输出-x结果还输出十六进制对应的ASCII字符</td>
</tr>
<tr>
<td>-s</td>
<td>设置抓包时的抓包长度</td>
</tr>
<tr>
<td>-w</td>
<td>将输出结果定向到某个文件，一般为pcap后缀</td>
</tr>
<tr>
<td>-r</td>
<td>从文件读取数据包并显示</td>
</tr>
</tbody></table>
<p>知道了相关参数，下面看几个案例</p>
<table>
<thead>
<tr>
<th align="left">执行任务</th>
<th align="left">执行命令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">捕获特定网口数据包</td>
<td align="left"><code>tcpdump -i eth0</code></td>
</tr>
<tr>
<td align="left">捕获特定个数(1000)的包</td>
<td align="left"><code>tcpdump -c 1000 -i eth0</code></td>
</tr>
<tr>
<td align="left">将捕获的包保存到文件</td>
<td align="left"><code>tcpdump -w a.pcap -i eth0</code></td>
</tr>
<tr>
<td align="left">读取pcap格式的包</td>
<td align="left"><code>tcpdump -r a.pcap</code></td>
</tr>
<tr>
<td align="left">增加捕获包的时间戳</td>
<td align="left"><code>tcpdump -n -ttt -i eth0</code></td>
</tr>
<tr>
<td align="left">指定捕获包的协议类型</td>
<td align="left"><code>tcpdump -i eth0 arp</code></td>
</tr>
<tr>
<td align="left">捕获指定端口</td>
<td align="left"><code>tcpdump -i eth0 post 22</code></td>
</tr>
<tr>
<td align="left">捕获特定目标ip+port的包</td>
<td align="left"><code>tcpdump -i eth0 dst address and port 22</code></td>
</tr>
<tr>
<td align="left">捕获DNS请求和响应</td>
<td align="left"><code>tcpdump -i eth0 -s0 port 53</code></td>
</tr>
<tr>
<td align="left">匹配Http请求头</td>
<td align="left">`tcpdump -s 0 -v -n -l</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>将捕获的包保存到文件</th>
<th>tcpdump -w a.pcap -i eth0</th>
</tr>
</thead>
<tbody><tr>
<td>读取pcap格式的包</td>
<td><code>tcpdump -r a.pcap</code></td>
</tr>
<tr>
<td>增加捕获包的时间戳</td>
<td><code>tcpdump -n -ttt -i eth0</code></td>
</tr>
<tr>
<td>指定捕获包的协议类型</td>
<td><code>tcpdump -i eth0 arp</code></td>
</tr>
<tr>
<td>捕获指定端口</td>
<td><code>tcpdump -i eth0 post 22</code></td>
</tr>
<tr>
<td>捕获特定目标ip+port的包</td>
<td><code>tcpdump -i eth0 dst address and port 22</code></td>
</tr>
<tr>
<td>捕获DNS请求和响应</td>
<td><code>tcpdump -i eth0 -s0 port 53</code></td>
</tr>
<tr>
<td>匹配Http请求头</td>
<td>`tcpdump -s 0 -v -n -l</td>
</tr>
</tbody></table>
<h2 id="11-lsof"><a href="#11-lsof" class="headerlink" title="11. lsof"></a>11. lsof</h2><blockquote>
<p>列出当前系统打开的文件描述符工具。可以得知感兴趣的描述符是被哪些进程使用</p>
</blockquote>
<p>同样，我们看看相关参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-i</td>
<td align="left">显示sokcet文件描述符</td>
</tr>
<tr>
<td align="left">-c</td>
<td align="left">显示指定的命令打开的所有文件描述符</td>
</tr>
<tr>
<td align="left">-t</td>
<td align="left">仅显示打开了目标文件描述符的进程pid</td>
</tr>
</tbody></table>
<p>老规矩，上几个例子</p>
<table>
<thead>
<tr>
<th align="left">执行任务</th>
<th align="left">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">列出所有的网络链接</td>
<td align="left"><code>lsof -i</code></td>
</tr>
<tr>
<td align="left">列出所有udp的网络链接</td>
<td align="left"><code>lsof -i udp</code></td>
</tr>
<tr>
<td align="left">列出谁在使用某个端口</td>
<td align="left"><code>lsof -i :3306</code></td>
</tr>
<tr>
<td align="left">列出谁在使用特定的tcp端口</td>
<td align="left"><code>lsof -i tcp:80</code></td>
</tr>
<tr>
<td align="left">根据文件描述范围列出文件信息</td>
<td align="left"><code>lsof -d 2-3</code></td>
</tr>
</tbody></table>
<h2 id="12-nc"><a href="#12-nc" class="headerlink" title="12. nc"></a>12. nc</h2><blockquote>
<p>nc–&gt;“瑞士军刀”。不知大家在渗透过程中，拿了shell有没有使用nc搞点事儿。它用来快速构建网络链接。常用来调试客户端程序。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-i</td>
<td align="left">设置数据包传送的时间间隔</td>
</tr>
<tr>
<td align="left">-l</td>
<td align="left">以服务器方式运行。默认为客户端运行</td>
</tr>
<tr>
<td align="left">-k</td>
<td align="left">重复接受并处理某个端口上的所有链接</td>
</tr>
<tr>
<td align="left">-p</td>
<td align="left">以客户端运行时强制其使用指定端口</td>
</tr>
<tr>
<td align="left">-C</td>
<td align="left">将CR和LF两个字符作为结束符</td>
</tr>
<tr>
<td align="left">-u</td>
<td align="left">使用udp协议。默认tcp协议</td>
</tr>
<tr>
<td align="left">-X</td>
<td align="left">nc客户端余代理服务器通信时默认为socks5协议。</td>
</tr>
<tr>
<td align="left">-z</td>
<td align="left">扫描目标机器某个范围服务是否开启</td>
</tr>
</tbody></table>
<p>案例</p>
<table>
<thead>
<tr>
<th align="left">执行任务</th>
<th align="left">执行命令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">扫描机器A端口号在30-40的服务</td>
<td align="left"><code>nc -z A 30-40</code></td>
</tr>
<tr>
<td align="left">连接服务器A 端口号为5000</td>
<td align="left"><code>nc -C A 5000</code></td>
</tr>
<tr>
<td align="left">传送文件</td>
<td align="left"><code>MachineA:nc -v -n ip portE:\a.exe</code></td>
</tr>
</tbody></table>
<h2 id="13-netstat"><a href="#13-netstat" class="headerlink" title="13. netstat"></a>13. netstat</h2><blockquote>
<p>netstat是一个网络信息统计工具。它可以得到网卡接口上全部了解，路由表信息，网卡接口信息等。通常在网络编程中我们用它来显示TCP连接以及状态信息。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-n</td>
<td align="left">使用IP地址表示主机</td>
</tr>
<tr>
<td align="left">-a</td>
<td align="left">显示结果中包含监听的socket</td>
</tr>
<tr>
<td align="left">-t</td>
<td align="left">仅显示TCP连接</td>
</tr>
<tr>
<td align="left">-r</td>
<td align="left">显示路由信息</td>
</tr>
<tr>
<td align="left">-i</td>
<td align="left">显示网卡接口数据流量</td>
</tr>
<tr>
<td align="left">-c</td>
<td align="left">每隔1s输出一次</td>
</tr>
<tr>
<td align="left">-o</td>
<td align="left">显示socket定时器的信息</td>
</tr>
<tr>
<td align="left">-p</td>
<td align="left">显示socket所属的进程的PID和名字</td>
</tr>
</tbody></table>
<p>下面列举几个常用例子</p>
<table>
<thead>
<tr>
<th align="left">执行任务</th>
<th align="left">执行命令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">列出所有连接</td>
<td align="left"><code>netstat -a</code></td>
</tr>
<tr>
<td align="left">只列出TCP或者UDP</td>
<td align="left"><code>netstat -at/netstat -au</code></td>
</tr>
<tr>
<td align="left">列出监听中的连接</td>
<td align="left"><code>netstat -tnl</code></td>
</tr>
<tr>
<td align="left">获取进程名、进程号以及用户 ID</td>
<td align="left"><code>nestat  -nlpt</code></td>
</tr>
<tr>
<td align="left">打印统计信息</td>
<td align="left"><code>netstat -s</code></td>
</tr>
<tr>
<td align="left">netstat持续输出</td>
<td align="left"><code>netstat -ct</code></td>
</tr>
<tr>
<td align="left">打印active状态的连接</td>
<td align="left">`netstat -atnp</td>
</tr>
<tr>
<td align="left">查看服务是否运行(npt)</td>
<td align="left">`netstat -aple</td>
</tr>
</tbody></table>
<h2 id="14-vmstat"><a href="#14-vmstat" class="headerlink" title="14. vmstat"></a>14. vmstat</h2><blockquote>
<p><code>vmstat</code>能够实时输出系统的进程信息，内存使用，<code>cpu</code>使用等资源的使用情况</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-f</td>
<td align="left">显示系统自启动以来执行的fork次数</td>
</tr>
<tr>
<td align="left">-s</td>
<td align="left">显示内存相关统计信息</td>
</tr>
<tr>
<td align="left">-d</td>
<td align="left">显示磁盘相关统计信息</td>
</tr>
<tr>
<td align="left">-p</td>
<td align="left">显示指定磁盘分区统计信息</td>
</tr>
<tr>
<td align="left">count</td>
<td align="left">采样次数。</td>
</tr>
</tbody></table>
<p>看一下vmstat都有哪些输出字段。</p>
<p><img src="https://2020-05-13-my-pic-bed.oss-cn-beijing.aliyuncs.com/2020-05-picgo/image-20200519171508934.png" alt="image-20200519171508934"></p>
<table>
<thead>
<tr>
<th align="left">字段名</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">procs</td>
<td align="left">r表示等待运行的而进程数目。b表示处于不可中断睡眠状态的进程数目</td>
</tr>
<tr>
<td align="left">memory</td>
<td align="left">swpd：使用的虚拟内存量。free：空闲内存量。buff：用作缓冲区的内存量。cache：用作缓存的内存量。</td>
</tr>
<tr>
<td align="left">swap</td>
<td align="left">si：从磁盘换入的内存量（/s）。so：交换到磁盘的内存量（/s）。</td>
</tr>
<tr>
<td align="left">io</td>
<td align="left">bi：从块设备接收的块（blocks/s）。bo：发送到块设备的块（blocks/s）。</td>
</tr>
<tr>
<td align="left">system</td>
<td align="left">in：每秒中断的次数，包括时钟。cs：每秒上下文切换的次数。</td>
</tr>
</tbody></table>
<blockquote>
<p>这里注意哈，如果查看磁盘的更加详细信息，有另外iostat所得到的信息就更加详细哟</p>
</blockquote>
<h2 id="15-mpstat"><a href="#15-mpstat" class="headerlink" title="15. mpstat"></a>15. mpstat</h2><blockquote>
<p>能够实时监测多处理器系统中各个cpu的使用情况。这个命令的执行需要安装 <code>sysstat</code> ，在centos中执行 <code>yum install systat</code> 就好了。</p>
</blockquote>
<p><img src="https://2020-05-13-my-pic-bed.oss-cn-beijing.aliyuncs.com/2020-05-picgo/image-20200519171945630.png" alt="image-20200519171945630"></p>
<p>然后我们看看各个字段什么意思。</p>
<table>
<thead>
<tr>
<th align="left">字段</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">cpu</td>
<td align="left">表示当前条信息属于哪个cpu的数据</td>
</tr>
<tr>
<td align="left">%usr</td>
<td align="left">进程运行在用户空间所占cpu运行时间的比例</td>
</tr>
<tr>
<td align="left">%nice</td>
<td align="left">nice值为负的进程运行在用户空间的时间占cpu总运行时间的比例</td>
</tr>
<tr>
<td align="left">%iowait</td>
<td align="left">cpu等待磁盘操作的时间占cpu总运行时间的比例</td>
</tr>
<tr>
<td align="left">%irq</td>
<td align="left">cpu用于处理硬件中断时间占cpu总运行时间的比例</td>
</tr>
<tr>
<td align="left">%soft</td>
<td align="left">cpu用于处理软件中断的时间占cpu用运行时间的比例</td>
</tr>
<tr>
<td align="left">%steal</td>
<td align="left">一对虚拟cpu。当超级管理员在处理某个虚拟cpu时，另一个等待它处理完才能运行。这段等待时间表示为steal时间占总运行时间的比例</td>
</tr>
<tr>
<td align="left">%guest</td>
<td align="left">运行虚拟cpu时间占cpu总运行时间的比例</td>
</tr>
<tr>
<td align="left">%idle</td>
<td align="left">系统空闲时间占cpu总运行时间的比例</td>
</tr>
</tbody></table>
<h2 id="16-split"><a href="#16-split" class="headerlink" title="16. split"></a>16. split</h2><blockquote>
<p>将文件分割为数个。</p>
</blockquote>
<p><code>split -5 a.txt</code> //将a.txt每5行分割为一个文件</p>
<h2 id="17-wc-c-filename"><a href="#17-wc-c-filename" class="headerlink" title="17. wc -c +filename"></a>17. wc -c +filename</h2><blockquote>
<p>统计文件中单词的个数。</p>
</blockquote>
<h2 id="18-more-less"><a href="#18-more-less" class="headerlink" title="18. more/less"></a>18. more/less</h2><blockquote>
<p>一页一页显示，通过空白键显示下一页/上一页</p>
</blockquote>
<h2 id="19-head-tail"><a href="#19-head-tail" class="headerlink" title="19. head/tail"></a>19. head/tail</h2><blockquote>
<p>查看某文件前几行或者后几行</p>
</blockquote>
<h2 id="20-diff"><a href="#20-diff" class="headerlink" title="20. diff"></a>20. diff</h2><blockquote>
<p><code>diff -c file1 file2</code> //显示两个文件的差异</p>
</blockquote>
<p><em>以上文章来源于<code>我是程序员小贱</code>，部分内容有删改。</em></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
